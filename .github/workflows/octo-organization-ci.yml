name: octo-Organization CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: Run a one-line script
        run: echo Hello from Octo Organization
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.5.1
        with:
          # Set always-auth in npmrc.
          always-auth: false
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          node-version: 18 # optional
          # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
          # node-version-file: # optional
          # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
          # architecture: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec.
          # check-latest: # optional
          # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
          # registry-url: # optional
          # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
          # scope: # optional
          # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
          token: ${{ github.token }}
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
          cache: npm # optional
          # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
          # cache-dependency-path: # optional
      - name: npm install, build, and test
        run: |
          npm install mongoose --save
          npm install http
          npm install ejs
          npm install body-parser
          npm install cookie-parser
          npm install --save-dev mocha
          npm test 
      - run: |
          mkdir -p test/output
          touch test/output/result.txt
          echo "test done" > test/output/result.txt
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: test/output/result.txt
